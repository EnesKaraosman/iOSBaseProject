//
//  AppDelegate.swift
//  BaseProject
//
//  Created by Enes Karaosman on 20.09.2019.
//  Copyright © 2019 Enes Karaosman. All rights reserved.
//

import UIKit
import Bagel

// MARK: TODO

// MARK: - Network
/// Network (Rx, Plain), JSON Parsing (ObjectMapper, SwiftyJSON, Default JSONDecoder)
/// Consider using enumeration cases for api (service interfaces) ref: ios-base-swift-master/Services
/// You can track network activities with Bagel framework

// MARK: - Design Pattern
/// Design Pattern (MVP, MVVM),
/// Coordinator (XCoordinator) For presenting ViewController, consider bottom popup to reflect iOS 13's default behaviour
/// Leave at least one example in this project for design patterns

// MARK: - Database
// Local Database (Realm, NSUserDefault-ForBasicThings)

// MARK: - Helper, Util
// Logger (May be used with analitycs services) ✅
// Localization ✅ (Consider using SwiftGen, autogenerated localization strings https://github.com/SwiftGen/SwiftGen)
// Styler (TextStyle, FontManager)
// Reusable (Identifiable)
// Loading Indicator integration ✅
// Extensions
// Bottom bar vc, PagerStripVC
// Constants
// Configuration File (May include all primary fonts, colors, urls.. ?)

/// BaseClasses, BaseComponents (BaseViews, Dark mode support)
/// Component Factory (UI components)

// MARK: - Analytics

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        
        self.setupWindow()
        
        Bagel.start()
        
        APIClient.instance.environment = NetworkEnvironment(baseUrl: "https://5da476a3a6593f001407a7af.mockapi.io/")
        
        Connectivity.shared.listener = { state in
            guard let nv = self.window?.rootViewController as? UINavigationController else { return }
            nv.viewControllers.first?.view.makeToast(Connectivity.shared.isConnectedToInternet ? "Connected to Internet": "Connection Lost")
        }
        
        return true
    }
    
    private func setupWindow() {
        window = UIWindow(frame: UIScreen.main.bounds)
        window?.rootViewController = UINavigationController(rootViewController: ExampleViewController())
        window?.makeKeyAndVisible()
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // We can schedule background tasks here.
    }

}

